import numpy as np
import matplotlib.pyplot as plt
import json
from scipy.integrate import odeint

# Параметры
c = 0.85  # Коэффициент сопротивления
rho = 0.4  # Плотность
g = 9.81  # Ускорение свободного падения
M = 0.028  # Масса
R = 8.31  # Универсальная газовая постоянная
T = 300  # Температура
S = 70.27  # Площадь
GM3 = 6.8 * 10 ** (-11) * 5.2915793e22   # Гравитационная постоянная
R_e = 600000  # Радиус планеты

# Начальные условия
x1_0 = 0  # Начальное значение x1
x2_0 = 0  # Начальное значение x2
x3_0 = 0  # Начальное значение x3
x4_0 = 0  # Начальное значение x4
x5_0 = 36000  # Начальное значение x5
x6_0 = 90  # Начальное значение x6

stages = [{'F_t': 700000, 'mass': 10500, 'time': 40},  # Первая ступень
          {'F_t': 330000, 'mass': 8000, 'time': 135}]  # Вторая ступень

# Функция для системы дифференциальных уравнений
def f(data, t, stage):
    x1, x2, x3, x4, x5, x6 = data
    global T
    fuel = stages[stage]['mass']
    F_t = stages[stage]['F_t']
    t_stage = stages[stage]['time']
    dm = fuel / t_stage  # Расход топлива

    # Изменение температуры с высотой
    if T > 30:
        T = 300 - 6 * (x2 // 1800)

    # Изменение угла наклона
    x6 = 90 * (1 - x2 / 70000)
    if x6 <= 0:
        x6 = 0

    # Скорость ракеты
    V = np.sqrt(abs(x3 ** 2 + x4 ** 2))

    # Ускорение по X и Y
    dx3 = (F_t - c * (rho * np.exp(-g * M * x2 / (R * T)) * V ** 2 * S / 2)) / x5 * np.cos(np.radians(x6))
    dx4 = ((F_t - c * (rho * np.exp(-g * M * x2 / (R * T)) * V ** 2 * S / 2)) / x5 * np.sin(np.radians(x6)) - GM3 / (R_e + x2) ** 2)

    # Изменение массы
    dx5 = -dm

    # Изменение угла
    dx6 = -90 * x2 / 70000

    return [x3, x4, dx3, dx4, dx5, dx6]

# Решение ОДУ для первой ступени
time_stage_first = np.linspace(0, stages[0]["time"], 100)
odeint_first = odeint(f, [x1_0, x2_0, x3_0, x4_0, x5_0, x6_0], time_stage_first, args=(0,))

# Решение ОДУ для второй ступени
time_stage_second = np.linspace(0, stages[1]["time"], 100)
odeint_second = odeint(f, np.concatenate([odeint_first[-1, :4], [odeint_first[-1, 4] - 16300], [odeint_first[-1, 5]]]), time_stage_second, args=(1,))

# Объединение результатов
time = np.concatenate([time_stage_first, time_stage_first[-1] + time_stage_second])
x = np.concatenate([odeint_first[:, 0], odeint_second[:, 0]])
y = np.concatenate([odeint_first[:, 1], odeint_second[:, 1]])
x_speeds = np.concatenate([odeint_first[:, 2], odeint_second[:, 2]])
y_speeds = np.concatenate([odeint_first[:, 3], odeint_second[:, 3]])
mass = np.concatenate([odeint_first[:, 4], odeint_second[:, 4]])

# Расчет ускорения
acceleration = []
acceleration.append(0)
for i in range(1, len(x_speeds)):
    acceleration.append(((x_speeds[i] - x_speeds[i - 1]) ** 2 + (y_speeds[i] - y_speeds[i - 1]) ** 2)**0.5)

# Построение графиков
plt.figure(figsize=(12, 16))  # Увеличим размер по вертикали для 4 графиков

# График скорости
plt.subplot(4, 1, 1)
plt.plot(time, np.sqrt(x_speeds**2 + y_speeds**2)/4, label="Скорость (модель)")
with open("flight_data.json", 'r', encoding="UTF-8") as file:
    data = json.load(file)
plt.plot(data["pastime"][1:324], data["velocity"][1:324], color="red", label="Скорость (KSP)")
plt.ylabel("Скорость, м/с")
plt.xlabel("Время, с")
plt.xlim()  # Ограничение по оси X
plt.legend()
# График высоты
plt.subplot(4, 1, 2)
plt.plot(time, y, label="Высота (модель)")
plt.plot(data["pastime"][1:324], data["height"][1:324], color="red", label="Высота (KSP)")
plt.ylabel("Высота, м")
plt.xlabel("Время, с")
plt.xlim()  # Ограничение по оси X
plt.legend()
# График ускорения
plt.subplot(4, 1, 3)
plt.plot(time, acceleration, label="Ускорение (модель)")
# Если в данных KSP есть информация об ускорении, можно добавить:
plt.plot(data["acceleration"][1:324], color="red", label="Ускорение (KSP)")
plt.ylabel("Ускорение, м/с²")
plt.xlabel("Время, с")
plt.xlim()  # Ограничение по оси X
plt.legend()
# График массы
plt.subplot(4, 1, 4)
plt.plot(time, mass, label="Масса (модель)")
# Если в данных KSP есть информация о массе, можно добавить:
if "mass" in data:
     plt.plot(data["pastime"][1:324], data["mass"][1:324], color="red", label="Масса (KSP)")
plt.ylabel("Масса, кг")
plt.xlabel("Время, с")
plt.xlim()  # Ограничение по оси X
plt.legend()
plt.tight_layout()
plt.show()
